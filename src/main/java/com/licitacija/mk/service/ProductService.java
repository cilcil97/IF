package com.licitacija.mk.service;import com.licitacija.mk.models.City;import com.licitacija.mk.models.Product;import com.licitacija.mk.models.User;import com.licitacija.mk.models.exceptions.BadParametarException;import com.licitacija.mk.models.exceptions.NotFoundException;import com.licitacija.mk.repository.ProductRepository;import org.springframework.stereotype.Service;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import java.util.List;@Servicepublic class ProductService {    private final ProductRepository repository;    private final CityService cityService;    private final UserService userService;    public ProductService(ProductRepository repository, CityService cityService, UserService userService) {        this.repository = repository;        this.cityService = cityService;        this.userService = userService;    }    public Product findProductById(Long product_id) {        return repository.findById(product_id)                .orElseThrow(() -> new NotFoundException("There is no product with id:" + product_id));    }    public void deleteProductById(long product_id) {        Product product = findProductById(product_id);        repository.delete(product);    }    public void addNewProduct(String userId, String startPrice, String startDate, String endDate, String title, String description, String cityName) {        Product product = new Product();        User user;        City city = cityService.findCityByCityName(cityName);        Long start_price, user_id;        LocalDateTime start, end;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm");        try {            user_id = Long.parseLong(userId);        } catch (Exception e) {            throw new BadParametarException("User Id is not ok!");        }        user = userService.findUserById(user_id);        try {            start_price = Long.parseLong(startPrice);        } catch (Exception e) {            throw new BadParametarException("Start Price is not ok!");        }        try {            start = LocalDateTime.parse(startDate, formatter);        } catch (Exception e) {            throw new BadParametarException("Start Date is not ok!");        }        try {            end = LocalDateTime.parse(endDate, formatter);        } catch (Exception e) {            throw new BadParametarException("End Date is not ok!");        }        if (start.compareTo(end) < 0 && start.compareTo(LocalDateTime.now()) > 0) {            product.setStartAuction(start);            product.setEndAuction(end);        } else {            throw new BadParametarException("Start and end dates are not okay");        }        if (title != null) {            product.setTitle(title);        } else {            throw new BadParametarException("Title is not okay");        }        if (description != null) {            product.setDescription(description);        } else {            throw new BadParametarException("Description is not okay");        }        if (start_price != null) {            product.setStart_price(start_price);        } else {            throw new BadParametarException("Start price is not okay");        }        product.setMax_price(start_price);        product.setCity(city);        product.setDatePublished(LocalDateTime.now());        product.setUser(user);        repository.save(product);    }    public void updateProduct(long product_id, String startPrice, String startDate, String endDate, String updatedDatePublishedString, String title, String description, String maxPrice, String cityName) {        //TODO CHECK IF USER IS LOGGED IN AND IS OWNER OF THIS PRODUCT AD!!!!        // TODO CHECK If we send only the info that is being updated, or we send everything again!!!!!        Product product = findProductById(product_id);        Long start_price, max_price;        LocalDateTime start, end, updatedDatePublished;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");        try {            max_price = Long.parseLong(maxPrice);        } catch (Exception e) {            throw new BadParametarException("Max Price is not ok!");        }        try {            start_price = Long.parseLong(startPrice);        } catch (Exception e) {            throw new BadParametarException("Start Price is not ok!");        }        try {            start = LocalDateTime.parse(startDate, formatter);        } catch (Exception e) {            throw new BadParametarException("Start Date is not ok!");        }        try {            end = LocalDateTime.parse(endDate, formatter);        } catch (Exception e) {            throw new BadParametarException("End Date is not ok!");        }        try {            updatedDatePublished = LocalDateTime.parse(updatedDatePublishedString, formatter);        } catch (Exception e) {            throw new BadParametarException("Update Date is not ok!");        }        if (cityName != null) {            City city = cityService.findCityByCityName(cityName);            product.setCity(city);        }        if (start != null && end != null) {            if (start.compareTo(end) < 0 && start.compareTo(LocalDateTime.now()) > 0) {                product.setStartAuction(start);                product.setEndAuction(end);            }        } else if (start != null) {            if (start.compareTo(product.getEndAuction()) < 0 && start.compareTo(LocalDateTime.now()) > 0) {                product.setStartAuction(start);            }        } else if (end != null) {            if (end.compareTo(product.getStartAuction()) > 0 && end.compareTo(LocalDateTime.now()) > 0) {                product.setEndAuction(end);            }        }        if (updatedDatePublished != null) {            // Update se pravi vo moment na zacuvuvanje, da ne mozhe sam da si prati shto saka!!!            product.setDatePublished(LocalDateTime.now());        }        if (title != null) {            product.setTitle(title);        }        if (description != null) {            product.setDescription(description);        }        if (max_price != null && max_price > product.getMax_price()) {            product.setMax_price(max_price);        }        if (start_price != null) {            product.setStart_price(start_price);        }        repository.save(product);    }    public List<Product> findProductsByCity(String cityName) {        City city = cityService.findCityByCityName(cityName);        return repository.findAllByCity(city);    }    public List<Product> findProductsByUser(long userId) {        User user = userService.findUserById(userId);        return repository.findAllByUser(user);    }    public List<Product> findAllProducts() {        return repository.findAll();    }}