package com.licitacija.mk.service;import com.licitacija.mk.models.City;import com.licitacija.mk.models.Product;import com.licitacija.mk.models.expections.BadParametarException;import com.licitacija.mk.models.expections.NotFoundException;import com.licitacija.mk.repository.ProductRepository;import org.springframework.stereotype.Service;import java.time.LocalDateTime;import java.util.List;@Servicepublic class ProductService {    private final ProductRepository repository;    private final CityService cityService;    public ProductService(ProductRepository repository, CityService cityService) {        this.repository = repository;        this.cityService = cityService;    }    public Product findProductById(Long product_id) {        return repository.findById(product_id).orElseThrow(() -> new NotFoundException("There is no product with id:" + product_id));    }    public void deleteProductById(long product_id) {        Product product = findProductById(product_id);        repository.delete(product);    }    public void addNewproduct(Long start_price, LocalDateTime start, LocalDateTime end,String title, String description,long city_id) {        Product product = new Product();        if (start != null && end != null) {            if (start.compareTo(end) < 0 && start.compareTo(LocalDateTime.now()) > 0) {                product.setStartAuction(start);                product.setEndAuction(end);            }            else {                throw  new BadParametarException("Start and end dates are not okay");            }        }        else{            throw new BadParametarException("Start and end dates are not okay");        }        if(title!=null){            product.setTitle(title);        }        else {            throw new BadParametarException("Title is not okay");        }        if(description!=null){            product.setDescription(description);        }        else{            throw new BadParametarException("Description is not okay");        }        if(start_price!=null){            product.setStart_price(start_price);        }        else {            throw new BadParametarException("Start price is not okay");        }        product.setMax_price(start_price);        City city = cityService.findCityById(city_id);        product.setCity(city);        product.setDatePublished(LocalDateTime.now());        repository.save(product);    }    public void updateProduct(long product_id, Long start_price, LocalDateTime start, LocalDateTime end, LocalDateTime updatedDatePublished, String title, String description, Long max_price) {        Product product = findProductById(product_id);        if (start != null && end != null) {            if (start.compareTo(end) < 0 && start.compareTo(LocalDateTime.now()) > 0) {                product.setStartAuction(start);                product.setEndAuction(end);            }        } else if (start != null) {            if (start.compareTo(product.getEndAuction()) < 0 && start.compareTo(LocalDateTime.now()) > 0) {                product.setStartAuction(start);            }        }        else if(end!=null){            if(end.compareTo(product.getStartAuction()) > 0 && end.compareTo(LocalDateTime.now()) >0){                product.setEndAuction(end);            }        }        if(updatedDatePublished != null){            product.setDatePublished(updatedDatePublished);        }        if(title!=null){            product.setTitle(title);        }        if(description!=null){            product.setDescription(description);        }        if(max_price!=null &&  max_price > product.getMax_price())        {            product.setMax_price(max_price);        }        if(start_price!=null){            product.setStart_price(start_price);        }        repository.save(product);    }    public List<Product> findProductsByCity(long city_id){        City city = cityService.findCityById(city_id);        return repository.findAllByCity(city);    }    // TODO ADD NEW SEARCH BY CITY}