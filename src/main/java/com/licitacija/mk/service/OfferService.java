package com.licitacija.mk.service;import com.licitacija.mk.models.Offer;import com.licitacija.mk.models.Product;import com.licitacija.mk.models.User;import com.licitacija.mk.models.expections.BadParametarException;import com.licitacija.mk.models.expections.NotFoundException;import com.licitacija.mk.repository.OfferRepository;import org.springframework.stereotype.Service;import java.time.LocalDateTime;import java.util.Comparator;import java.util.List;@Servicepublic class OfferService {    private final OfferRepository repository;    private final UserService userService;    private final ProductService productService;    public OfferService(OfferRepository repository, UserService userService, ProductService productService) {        this.repository = repository;        this.userService = userService;        this.productService = productService;    }    // TODO new OFFER , LIST ALL BY PRODUCT    public Offer findOfferById(Long id){        return repository.findById(id).orElseThrow(()-> new NotFoundException("There is no offer with id:"+id));    }    public void addNewOffer(Long user_id,Long product_id,long price){        User user = userService.findUserById(user_id);        Product product = productService.findProductById(product_id);        if(price<product.getMax_price()){            throw new BadParametarException("The price is lower than max price");        }//        if(price>product.getMax_price()){//            //TODO UPDATE PRODUCT MAXPRICE//        }        LocalDateTime date = LocalDateTime.now();        Offer offer = new Offer();        offer.setDate(date);        offer.setGivenByUser(user);        offer.setGivenForProduct(product);        offer.setPrice(price);        repository.save(offer);    }    public List<Offer> findAllOffersForProduct(long product_id){        Product product = productService.findProductById(product_id);        return repository.findAllByGivenForProduct(product);    }    public List<Offer> findAllOffersFromUser(long user_id){        User user = userService.findUserById(user_id);        return repository.findAllByGivenByUser(user);    }    public Offer findLatestOfferByUser(long user_id){        List<Offer> rez = findAllOffersFromUser(user_id);        return rez.stream()                .max(Comparator.comparing(Offer::getDate))                .orElseThrow(()-> new NotFoundException("No offers from :" + user_id));    }}